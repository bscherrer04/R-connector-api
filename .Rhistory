library(devtools)
use_r("R_query_api")
load_all()
username <- "r-community"
password <- "Utotugode673"
v
url <- "https://r-community:Utotugode673@api.meteomatics.com/2022-08-30T00:00:00Z/t_2m:C/52.520551,13.461804/csv"
query_api(url, username, password)
load_all()
query_api(url, username, password)
load_all()
query_api(url, username, password)
load_all()
query_api(url, username, password)
url <- "https://api.meteomatics.com/2022-09-02T00:00:00Z/t_2m:C/52.520551,13.461804/csv"
query_api(url, username, password)
url <- "https://api.meteomatics.com/2022-08-30T00:00:00Z/t_2m:C/52.520551,13.461804/csv"
query_api(url, username, password)
url <- "https://api.meteomatics.com/2022-09-01T00:00:00Z/t_2m:C/52.520551,13.461804/csv"
query_api(url, username, password)
url <- "https://api.meteomatics.com/2022-08-31T00:00:00Z/t_2m:C/52.520551,13.461804/csv"
query_api(url, username, password)
use_r("exceptions")
query_api(url, username, password, request_type = "post")
?str_extract
?strsplit
load_all()
query_api(url, username, password, request_type = "post")
?content_type
load_all()
query_api(url, username, password, request_type = "post")
query_api(url, username, password, request_type = "poste")
load_all()
query_api(url, username, password, request_type = "poste")
load_all()
query_api(url, username, password)
?content
load_all()
query_api(url, username, password)
url <- "https://api.meteomatics.com/2022-09-02T00:00:00Z/t_2m:C/52.520551,13.461804/csv"
query_api(url, username, password)
exists("MeteomaticsRConnector", where = globalenv(), inherits = FALSE)
check()
.Last.error
load_all()
check()
?write_disk
load_all()
check()
load_all()
check()
use_mit_license()
load_all()
check()
document()
?query_api
document()
warnings()
?query_api
check()
load_all()
load_all()
document()
warnings()
check()
library(devtools)
load_all()
document()
?query_api
?MeteomaticsRConnector
document()
?query_api
document()
?query_api
document()
?query_api
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
document()
check()
document()
document()
load_all()
check()
?query_api
document()
load_all()
check()
?strftime
?today
document()
load_all()
check()
document()
load_all()
check()
?query_api
document()
?query_api
document()
?query_api
load_all()
check()
load_all()
username <- "r-community"
password <- "Utotugode673"
datetime <- strftime(ISOdatetime(year=as.integer(strftime(lubridate::today(),'%Y')),
month=as.integer(strftime(lubridate::today(),'%m')),
day=as.integer(strftime(lubridate::today(),'%d')),
hour = 00, min = 00, sec = 00, tz = 'UTC'),
format = '%Y-%m-%dT%H:%M:%OSZ', tz = 'UTC')
url <- paste0(sprintf('https://%s:%s@api.meteomatics.com/', username, password),
datetime, '/t_2m:C/52.520551,13.461804/csv')
query_api(url, username, password)
username <- "r-community"
password <- "Utotugode673"
datetime <- strftime(ISOdatetime(year=as.integer(strftime(lubridate::today(),'%Y')),
month=as.integer(strftime(lubridate::today(),'%m')),
day=as.integer(strftime(lubridate::today(),'%d')),
hour = 00, min = 00, sec = 00, tz = 'UTC'),
format = '%Y-%m-%dT%H:%M:%OSZ', tz = 'UTC')
url <- paste0(sprintf('https://%s:%s@api.meteomatics.com/', username, password),
datetime, '/t_2m:C/52.520551,13.461804/csv')
resp <- query_api(url, username, password)
use_readme_rmd()
build_readme()
check()
build_readme()
build_readme()
build_readme()
build_readme()
build_readme()
build_readme()
build_readme()
load_all()
document()
check()
document()
document()
?query_user_features
load_all()
check()
?sprintf
?.Deprecated
document()
?query_user_features
load_all()
check()
?jsonlite
document()
check()
document()
load_all()
check()
document()
load_all()
check()
use_r()
use_r("constants")
document()
rlang::last_error()
rlang::last_trace()
?tuple
?tuple
document()
load_all()
check()
document()
load_all()
load_all()
document()
load_all()
check()
tuple(c(-666, -777, -888, -999))
?data.table
sets::tuple(c(-666, -777, -888, -999))
document()
load_all()
check()
?query_user_features
query_user_features(username, password)
document()
load_all()
load_all()
check()
document()
load_all()
check()
document()
document()
load_all()
library(devtools)
load_all()
load_all()
document()
load_all()
document()
check()
?query_user_features
?Constants
?constants
??constants
?exceptions
?query_user_features
username <- "r-community"
password <- "Utotugode673"
stats <- query_user_features(username, password)
document()
load_all()
?query_user_features
document()
load_all()
?query_user_limits
check()
query_user_limits(username, password)
?attr
?strftime
?strsplit
?grepl
load_all()
check()
?seq
?gsup
?gsub
?sapply
?startsWith
?read.csv
?strsplit
?data.frame
?as.POSIXct
document()
document()
document()
document()
document()
document()
load_all()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
load_all()
library(devtools)
load_all()
document()
?query_time_series
check()
load_all()
document()
?query_time_series
load_all()
document()
?query_time_series
check()
load_all()
document()
?query_time_series
check()
load_all()
?query_time_series
document()
?query_time_series
check()
load_all()
document()
?query_time_series
check()
?today
load_all()
document()
?query_time_series
check()
load_all()
document()
?query_time_series
check()
library(devtools)
install.packages("devtools")
library(devtools)
load_all()
load_all()
install.packages("~/Downloads/Xmisc_0.2.1.tar.gz", repos = NULL, type = "source")
load_all()
load_all()
check()
load_all()
document()
?query_grid
document()
?query_grid
document()
?query_grid
load_all()
check()
check()
load_all()
check()
?fread
?content
?response
load_all()
document()
check()
load_all()
load_all()
document()
load_all()
check()
load_all()
document()
load_all()
document()
load_all()
document()
check()
document()
load_all()
check()
?strsplit
load_all()
check()
load_all()
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
check()
?query_grid
?query_grid
document()
?query_grid
??query_grid
load_all()
?query_grid
?query_grid
?query_time_series
?query_time_series.Rd
help(query_grid)
document()
?query_grid
document()
load_all()
?query_grid
library(MeteomaticsRConnector)
?query_grid
??query_grid
?MeteomaticsRConnector
library(devtools)
load_all()
?query_grid
?query_time_series
document()
load_all()
check()
document()
load_all()
?query_grid_png
check()
document()
load_all()
?query_grid_png
check()
document()
load_all()
check()
?query_grid_png
library(devtools)
load_all()
?query_grid_png
pwd
getwd
getwd()
document()
load_all()
?query_grid_png
?query_grid_png
check()
?query_grid_png
library(devtools)
load_all()
?query_grid_png
check()
?query_grid_png
library(devtools)
document()
library(devtools)
document()
?query_grid_timeseries
load_all()
document()
?query_grid_timeseries
library(devtools)
load_all()
?query_grid_timeseries
document()
load_all()
?query_grid_timeseries
library(devtools)
?query_grid_timeseries
document()
load_all()
?query_grid_timeseries
library(devtools)
load_all()
?query_grid_timeseries
load_all()
?query_grid_timeseries
document()
load_all()
?query_grid_timeseries
check()
?query_grid_png
?hours
document()
load_all()
?query_png_timeseries
document()
load_all()
check()
library(devtools)
load_all()
?query_png_timeseries
document()
load_all()
?query_geotiff
check()
library(devtools)
load_all()
?query_geotiff
document()
?query_geotiff
load_all()
?query_geotiff
check()
install.packages("rlist")
library(MeteomaticsRConnector)
library(devtools)
?MeteomaticsRConnector
?MeteomaticsRConnector::query_api
install.packages("~/RConnector/MeteomaticsRConnector_4.1.1.tar.gz", repos = NULL, type = "source")
library(MeteomaticsRConnector)
