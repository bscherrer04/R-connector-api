% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_polygon.R
\name{query_polygon}
\alias{query_polygon}
\title{Query a Polygon}
\usage{
query_polygon(
  latlon_tuple_lists,
  startdate,
  enddate,
  interval,
  parameters,
  aggregation,
  username,
  password,
  operator = NULL,
  model = NULL,
  ens_select = NULL,
  interp_select = NULL,
  on_invalid = NULL,
  request_type = "GET",
  cluster_select = NULL,
  ...
)
}
\arguments{
\item{latlon_tuple_lists}{The coordinates, in either of these forms:
"47.3,9.3", c("47.3,9.3", "47.43,9.4") or
list(c(47.3,9.3), c(47.43,9.4)).}

\item{startdate}{An ISOdatetime of the format \%Y-\%m-\%dT\%H:\%M:\%OSZ. The start
date gets converted into UTC if another timezone is selected.}

\item{enddate}{An ISOdatetime of the format \%Y-\%m-\%dT\%H:\%M:\%OSZ. The end date
gets converted into UTC if another timezone is selected.}

\item{interval}{A character vector e.g. of the form "PT1H" specifying the
interval of the parameter.}

\item{parameters}{A list of strings containing the parameters of interest
list("t_2m:C", "dew_point_2m:C", "relative_humidity_1000hPa:p",
"precip_1h:mm").}

\item{aggregation}{Select one of the following aggregates: min; max; mean;
median; mode. In case of multiple polygons with different
aggregators the number of aggregators and polygons must
match and the operator has to be set to NULL!}

\item{username}{A character vector containing the MM API username.}

\item{password}{A character vector containing the MM API password.}

\item{operator}{Specify an operator. Can be either "D" (difference) or "U" (union).
If more than one polygon is supplied, then the operator key has
to be defined except if different aggregators for multiple
polygons are selected.}

\item{model}{A character vector containing the model of interest. The default
value is NULL, meaning that the model mix is selected.}

\item{ens_select}{A character vector containing the ensembles of interest. The
default value is NULL. Possible inputs are for example:
"median"; "member:5"; "member:1-50"; "member:0"; "mean";
"quantile0.2".}

\item{interp_select}{A character vector specifying the interpolation: The
default value is NULL. A possible input is:
"gradient_interpolation".}

\item{on_invalid}{A character vector specifying the treatment of missing
weather station values. The default value is NULL. If
on_invalid = "fill_with_invalid", missing values are filled
with Na.}

\item{request_type}{A character vector containing the request type - either
"get" (Default) or "post".}

\item{cluster_select}{A character vector containing the cluster of interest.
The default value is NULL. Possible inputs are for example:
"cluster:1"; "cluster:1-6".}

\item{...}{A list of additional arguments. One possible argument is
calibrated = TRUE.}
}
\value{
A dataframe containing the valid date and queried parameters.
}
\description{
Query any weather parameter for the selected polygon and obtain mean, median,
minimum or maximum values from the Meteomatics Weather API
}
\examples{
\dontrun{
username <- "r-community"
password <- "Utotugode673"
time_zone <- "UTC"
startdate <- ISOdatetime(year = as.integer(strftime(lubridate::today(), '\%Y')),
                         month = as.integer(strftime(lubridate::today(), '\%m')),
                         day = as.integer(strftime(lubridate::today(), '\%d')) - 1,
                         hour = 00, min = 00, sec = 00, tz = time_zone)
enddate <- ISOdatetime(year = as.integer(strftime(lubridate::today(), '\%Y')),
                       month = as.integer(strftime(lubridate::today(), '\%m')),
                       day = as.integer(strftime(lubridate::today(), '\%d')),
                       hour = 00, min = 00, sec = 00, tz = time_zone)
interval <- "PT1H"
parameters <- list("t_2m:C", "dew_point_2m:C", "relative_humidity_2m:p", "precip_1h:mm")
coordinates <- list(list(c(45.1, 8.2), c(45.2, 8.0), c(46.2, 7.5)),
                    list(c(55.1, 8.2), c(55.2, 8.0), c(56.2, 7.5)))
aggregation <- "mean"
operator <- "U"
model <- "mix"
ens_select <- NULL
interp_select <- NULL
cluster_select <- NULL
polygon <- query_polygon(coordinates, startdate, enddate, interval, parameters,
                         aggregation, username, password, operator, model,
                         ens_select, interp_select, on_invalid = "fill_with_invalid",
                         cluster_select = cluster_select, calibrated = TRUE)
head(polygon)
}
}
