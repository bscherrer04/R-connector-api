% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_grid_timeseries.R
\name{query_grid_timeseries}
\alias{query_grid_timeseries}
\title{Query a Time Series on a Grid}
\usage{
query_grid_timeseries(
  startdate,
  enddate,
  interval,
  parameters,
  lat_N,
  lon_W,
  lat_S,
  lon_E,
  resolution,
  username,
  password,
  model = NULL,
  ens_select = NULL,
  interp_select = NULL,
  cluster_select = NULL,
  on_invalid = NULL,
  request_type = "GET",
  ...
)
}
\arguments{
\item{startdate}{An ISOdatetime of the format \%Y-\%m-\%dT\%H:\%M:\%OSZ. The start
date gets converted into UTC if another timezone is selected.}

\item{enddate}{An ISOdatetime of the format \%Y-\%m-\%dT\%H:\%M:\%OSZ. The end date
gets converted into UTC if another timezone is selected.}

\item{interval}{A character vector e.g. of the form "PT1H" specifying the
interval of the parameter.}

\item{parameters}{A list of strings containing the parameters of interest
list("t_2m:C", "dew_point_2m:C", "relative_humidity_1000hPa:p",
"precip_1h:mm").}

\item{lat_N}{A number giving the most northern coordinate of the desired grid.}

\item{lon_W}{A number giving the most western coordinate of the desired grid.}

\item{lat_S}{A number giving the most southern coordinate of the desired grid.}

\item{lon_E}{A number giving the most eastern coordinate of the desired grid.}

\item{resolution}{The resolution in latitude and longitude direction. If the
resolution is in degrees then in the form "0.1,0.5", or if the
resolution is in the number of latitudes/longitudes then in
the form "4x5".}

\item{username}{A character vector containing the MM API username.}

\item{password}{A character vector containing the MM API password.}

\item{model}{A character vector containing the model of interest. The default
value is NULL, meaning that the model mix is selected.}

\item{ens_select}{A character vector containing the ensembles of interest. The
default value is NULL. Possible inputs are for example:
"median"; "member:5"; "member:1-50"; "member:0"; "mean";
"quantile0.2".}

\item{interp_select}{A character vector specifying the interpolation: The
default value is NULL. A possible input is:
"gradient_interpolation".}

\item{cluster_select}{A character vector containing the cluster of interest.
The default value is NULL. Possible inputs are for example:
"cluster:1"; "cluster:1-6".}

\item{on_invalid}{A character vector specifying the treatment of missing
weather station values. The default value is NULL. If
on_invalid = "fill_with_invalid", missing values are filled
with Na.}

\item{request_type}{A character vector containing the request type - either
"get" (Default) or "post".}

\item{...}{A list of additional arguments.}
}
\value{
A DataFrame containing the latitude, longitude and validdate in the
first three columns and the corresponding parameter values in the
remaining columns.
}
\description{
Retrieve a time series on a grid from the Meteomatics Weather API
}
\examples{

username <- "r-community"
password <- "Utotugode673"
startdate <- ISOdatetime(year = as.integer(strftime(lubridate::today(), '\%Y')),
                         month = as.integer(strftime(lubridate::today(), '\%m')),
                         day = as.integer(strftime(lubridate::today(), '\%d')) - 1,
                         hour = 00, min = 00, sec = 00, tz = 'UTC')
enddate <- ISOdatetime(year = as.integer(strftime(lubridate::today(), '\%Y')),
                       month = as.integer(strftime(lubridate::today(), '\%m')),
                       day = as.integer(strftime(lubridate::today(), '\%d')),
                       hour = 00, min = 00, sec = 00, tz = 'UTC')
parameters <- list("evapotranspiration_1h:mm")
interval <- "PT1H"
lat_N <- 50
lon_W <- -15
lat_S <- 20
lon_E <- 10
resolution <- "3x4" # or "4,2"
model <- "mix"
query_grid_timeseries(startdate, enddate, interval, parameters, lat_N, lon_W,
                      lat_S, lon_E, resolution,
                      username, password, model = model)

}
